#include <iostream>
#include <vector>
using namespace std;

// Function to print the solution matrix
void printSolution(const vector<vector<int>>& solution) {
    for (const auto& row : solution) {
        for (int cell : row)
            cout << cell << " ";
        cout << endl;
    }
}

// Function to check if the cell is safe to move
bool isSafe(int x, int y, const vector<vector<int>>& maze, int n) {
    return (x >= 0 && x < n && y >= 0 && y < n && maze[x][y] == 1);
}

// Recursive function to solve the maze
bool solveMazeUtil(vector<vector<int>>& maze, int x, int y, vector<vector<int>>& solution, int n) {
    // If destination is reached
    if (x == n - 1 && y == n - 1 && maze[x][y] == 1) {
        solution[x][y] = 1;
        return true;
    }

    if (isSafe(x, y, maze, n)) {
        solution[x][y] = 1;

        // Move right
        if (solveMazeUtil(maze, x, y + 1, solution, n))
            return true;

        // Move down
        if (solveMazeUtil(maze, x + 1, y, solution, n))
            return true;

        // Backtrack
        solution[x][y] = 0;
    }

    return false;
}

// Main function to solve the maze
void solveMaze(vector<vector<int>>& maze) {
    int n = maze.size();
    vector<vector<int>> solution(n, vector<int>(n, 0));

    if (!solveMazeUtil(maze, 0, 0, solution, n))
        cout << "No path found!" << endl;
    else
        printSolution(solution);
}

int main() {
    vector<vector<int>> maze = {
        {1, 0, 0, 0},
        {1, 1, 0, 1},
        {0, 1, 0, 0},
        {1, 1, 1, 1}
    };

    solveMaze(maze);
    return 0;
}
